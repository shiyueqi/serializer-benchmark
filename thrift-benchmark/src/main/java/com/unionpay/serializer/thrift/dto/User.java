/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.unionpay.serializer.thrift.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-3")
public class User implements org.apache.thrift.TBase<User, User._Fields>, java.io.Serializable, Cloneable, Comparable<User> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("User");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EVER_USED_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("everUsedNames", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PRAISE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("praiseCount", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField FAN_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fanIds", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField FOLLOWER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("followerIds", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField FAN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("fanNames", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField FOLLOW_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("followNames", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField WEIGHT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("weightIds", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField USER_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("userAddress", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField USER_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("userOrder", org.apache.thrift.protocol.TType.LIST, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserTupleSchemeFactory());
  }

  public long id; // required
  public String userName; // required
  public List<String> everUsedNames; // required
  public int gender; // required
  public int age; // required
  public int praiseCount; // required
  public List<Long> fanIds; // required
  public List<Long> followerIds; // required
  public List<String> fanNames; // required
  public List<String> followNames; // required
  public List<Long> weightIds; // required
  public UserAddress userAddress; // required
  public List<UserOrder> userOrder; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    USER_NAME((short)2, "userName"),
    EVER_USED_NAMES((short)3, "everUsedNames"),
    GENDER((short)4, "gender"),
    AGE((short)5, "age"),
    PRAISE_COUNT((short)6, "praiseCount"),
    FAN_IDS((short)7, "fanIds"),
    FOLLOWER_IDS((short)8, "followerIds"),
    FAN_NAMES((short)9, "fanNames"),
    FOLLOW_NAMES((short)10, "followNames"),
    WEIGHT_IDS((short)11, "weightIds"),
    USER_ADDRESS((short)12, "userAddress"),
    USER_ORDER((short)13, "userOrder");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // USER_NAME
          return USER_NAME;
        case 3: // EVER_USED_NAMES
          return EVER_USED_NAMES;
        case 4: // GENDER
          return GENDER;
        case 5: // AGE
          return AGE;
        case 6: // PRAISE_COUNT
          return PRAISE_COUNT;
        case 7: // FAN_IDS
          return FAN_IDS;
        case 8: // FOLLOWER_IDS
          return FOLLOWER_IDS;
        case 9: // FAN_NAMES
          return FAN_NAMES;
        case 10: // FOLLOW_NAMES
          return FOLLOW_NAMES;
        case 11: // WEIGHT_IDS
          return WEIGHT_IDS;
        case 12: // USER_ADDRESS
          return USER_ADDRESS;
        case 13: // USER_ORDER
          return USER_ORDER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __GENDER_ISSET_ID = 1;
  private static final int __AGE_ISSET_ID = 2;
  private static final int __PRAISECOUNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVER_USED_NAMES, new org.apache.thrift.meta_data.FieldMetaData("everUsedNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRAISE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("praiseCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FAN_IDS, new org.apache.thrift.meta_data.FieldMetaData("fanIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.FOLLOWER_IDS, new org.apache.thrift.meta_data.FieldMetaData("followerIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.FAN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("fanNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FOLLOW_NAMES, new org.apache.thrift.meta_data.FieldMetaData("followNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.WEIGHT_IDS, new org.apache.thrift.meta_data.FieldMetaData("weightIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.USER_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("userAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "UserAddress")));
    tmpMap.put(_Fields.USER_ORDER, new org.apache.thrift.meta_data.FieldMetaData("userOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "UserOrder"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(User.class, metaDataMap);
  }

  public User() {
  }

  public User(
    long id,
    String userName,
    List<String> everUsedNames,
    int gender,
    int age,
    int praiseCount,
    List<Long> fanIds,
    List<Long> followerIds,
    List<String> fanNames,
    List<String> followNames,
    List<Long> weightIds,
    UserAddress userAddress,
    List<UserOrder> userOrder)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.userName = userName;
    this.everUsedNames = everUsedNames;
    this.gender = gender;
    setGenderIsSet(true);
    this.age = age;
    setAgeIsSet(true);
    this.praiseCount = praiseCount;
    setPraiseCountIsSet(true);
    this.fanIds = fanIds;
    this.followerIds = followerIds;
    this.fanNames = fanNames;
    this.followNames = followNames;
    this.weightIds = weightIds;
    this.userAddress = userAddress;
    this.userOrder = userOrder;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public User(User other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetEverUsedNames()) {
      List<String> __this__everUsedNames = new ArrayList<String>(other.everUsedNames);
      this.everUsedNames = __this__everUsedNames;
    }
    this.gender = other.gender;
    this.age = other.age;
    this.praiseCount = other.praiseCount;
    if (other.isSetFanIds()) {
      List<Long> __this__fanIds = new ArrayList<Long>(other.fanIds);
      this.fanIds = __this__fanIds;
    }
    if (other.isSetFollowerIds()) {
      List<Long> __this__followerIds = new ArrayList<Long>(other.followerIds);
      this.followerIds = __this__followerIds;
    }
    if (other.isSetFanNames()) {
      List<String> __this__fanNames = new ArrayList<String>(other.fanNames);
      this.fanNames = __this__fanNames;
    }
    if (other.isSetFollowNames()) {
      List<String> __this__followNames = new ArrayList<String>(other.followNames);
      this.followNames = __this__followNames;
    }
    if (other.isSetWeightIds()) {
      List<Long> __this__weightIds = new ArrayList<Long>(other.weightIds);
      this.weightIds = __this__weightIds;
    }
    if (other.isSetUserAddress()) {
      this.userAddress = other.userAddress;
    }
    if (other.isSetUserOrder()) {
      List<UserOrder> __this__userOrder = new ArrayList<UserOrder>(other.userOrder.size());
      for (UserOrder other_element : other.userOrder) {
        __this__userOrder.add(other_element);
      }
      this.userOrder = __this__userOrder;
    }
  }

  public User deepCopy() {
    return new User(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.userName = null;
    this.everUsedNames = null;
    setGenderIsSet(false);
    this.gender = 0;
    setAgeIsSet(false);
    this.age = 0;
    setPraiseCountIsSet(false);
    this.praiseCount = 0;
    this.fanIds = null;
    this.followerIds = null;
    this.fanNames = null;
    this.followNames = null;
    this.weightIds = null;
    this.userAddress = null;
    this.userOrder = null;
  }

  public long getId() {
    return this.id;
  }

  public User setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getUserName() {
    return this.userName;
  }

  public User setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public int getEverUsedNamesSize() {
    return (this.everUsedNames == null) ? 0 : this.everUsedNames.size();
  }

  public java.util.Iterator<String> getEverUsedNamesIterator() {
    return (this.everUsedNames == null) ? null : this.everUsedNames.iterator();
  }

  public void addToEverUsedNames(String elem) {
    if (this.everUsedNames == null) {
      this.everUsedNames = new ArrayList<String>();
    }
    this.everUsedNames.add(elem);
  }

  public List<String> getEverUsedNames() {
    return this.everUsedNames;
  }

  public User setEverUsedNames(List<String> everUsedNames) {
    this.everUsedNames = everUsedNames;
    return this;
  }

  public void unsetEverUsedNames() {
    this.everUsedNames = null;
  }

  /** Returns true if field everUsedNames is set (has been assigned a value) and false otherwise */
  public boolean isSetEverUsedNames() {
    return this.everUsedNames != null;
  }

  public void setEverUsedNamesIsSet(boolean value) {
    if (!value) {
      this.everUsedNames = null;
    }
  }

  public int getGender() {
    return this.gender;
  }

  public User setGender(int gender) {
    this.gender = gender;
    setGenderIsSet(true);
    return this;
  }

  public void unsetGender() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return EncodingUtils.testBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  public void setGenderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GENDER_ISSET_ID, value);
  }

  public int getAge() {
    return this.age;
  }

  public User setAge(int age) {
    this.age = age;
    setAgeIsSet(true);
    return this;
  }

  public void unsetAge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  /** Returns true if field age is set (has been assigned a value) and false otherwise */
  public boolean isSetAge() {
    return EncodingUtils.testBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  public void setAgeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGE_ISSET_ID, value);
  }

  public int getPraiseCount() {
    return this.praiseCount;
  }

  public User setPraiseCount(int praiseCount) {
    this.praiseCount = praiseCount;
    setPraiseCountIsSet(true);
    return this;
  }

  public void unsetPraiseCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRAISECOUNT_ISSET_ID);
  }

  /** Returns true if field praiseCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPraiseCount() {
    return EncodingUtils.testBit(__isset_bitfield, __PRAISECOUNT_ISSET_ID);
  }

  public void setPraiseCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRAISECOUNT_ISSET_ID, value);
  }

  public int getFanIdsSize() {
    return (this.fanIds == null) ? 0 : this.fanIds.size();
  }

  public java.util.Iterator<Long> getFanIdsIterator() {
    return (this.fanIds == null) ? null : this.fanIds.iterator();
  }

  public void addToFanIds(long elem) {
    if (this.fanIds == null) {
      this.fanIds = new ArrayList<Long>();
    }
    this.fanIds.add(elem);
  }

  public List<Long> getFanIds() {
    return this.fanIds;
  }

  public User setFanIds(List<Long> fanIds) {
    this.fanIds = fanIds;
    return this;
  }

  public void unsetFanIds() {
    this.fanIds = null;
  }

  /** Returns true if field fanIds is set (has been assigned a value) and false otherwise */
  public boolean isSetFanIds() {
    return this.fanIds != null;
  }

  public void setFanIdsIsSet(boolean value) {
    if (!value) {
      this.fanIds = null;
    }
  }

  public int getFollowerIdsSize() {
    return (this.followerIds == null) ? 0 : this.followerIds.size();
  }

  public java.util.Iterator<Long> getFollowerIdsIterator() {
    return (this.followerIds == null) ? null : this.followerIds.iterator();
  }

  public void addToFollowerIds(long elem) {
    if (this.followerIds == null) {
      this.followerIds = new ArrayList<Long>();
    }
    this.followerIds.add(elem);
  }

  public List<Long> getFollowerIds() {
    return this.followerIds;
  }

  public User setFollowerIds(List<Long> followerIds) {
    this.followerIds = followerIds;
    return this;
  }

  public void unsetFollowerIds() {
    this.followerIds = null;
  }

  /** Returns true if field followerIds is set (has been assigned a value) and false otherwise */
  public boolean isSetFollowerIds() {
    return this.followerIds != null;
  }

  public void setFollowerIdsIsSet(boolean value) {
    if (!value) {
      this.followerIds = null;
    }
  }

  public int getFanNamesSize() {
    return (this.fanNames == null) ? 0 : this.fanNames.size();
  }

  public java.util.Iterator<String> getFanNamesIterator() {
    return (this.fanNames == null) ? null : this.fanNames.iterator();
  }

  public void addToFanNames(String elem) {
    if (this.fanNames == null) {
      this.fanNames = new ArrayList<String>();
    }
    this.fanNames.add(elem);
  }

  public List<String> getFanNames() {
    return this.fanNames;
  }

  public User setFanNames(List<String> fanNames) {
    this.fanNames = fanNames;
    return this;
  }

  public void unsetFanNames() {
    this.fanNames = null;
  }

  /** Returns true if field fanNames is set (has been assigned a value) and false otherwise */
  public boolean isSetFanNames() {
    return this.fanNames != null;
  }

  public void setFanNamesIsSet(boolean value) {
    if (!value) {
      this.fanNames = null;
    }
  }

  public int getFollowNamesSize() {
    return (this.followNames == null) ? 0 : this.followNames.size();
  }

  public java.util.Iterator<String> getFollowNamesIterator() {
    return (this.followNames == null) ? null : this.followNames.iterator();
  }

  public void addToFollowNames(String elem) {
    if (this.followNames == null) {
      this.followNames = new ArrayList<String>();
    }
    this.followNames.add(elem);
  }

  public List<String> getFollowNames() {
    return this.followNames;
  }

  public User setFollowNames(List<String> followNames) {
    this.followNames = followNames;
    return this;
  }

  public void unsetFollowNames() {
    this.followNames = null;
  }

  /** Returns true if field followNames is set (has been assigned a value) and false otherwise */
  public boolean isSetFollowNames() {
    return this.followNames != null;
  }

  public void setFollowNamesIsSet(boolean value) {
    if (!value) {
      this.followNames = null;
    }
  }

  public int getWeightIdsSize() {
    return (this.weightIds == null) ? 0 : this.weightIds.size();
  }

  public java.util.Iterator<Long> getWeightIdsIterator() {
    return (this.weightIds == null) ? null : this.weightIds.iterator();
  }

  public void addToWeightIds(long elem) {
    if (this.weightIds == null) {
      this.weightIds = new ArrayList<Long>();
    }
    this.weightIds.add(elem);
  }

  public List<Long> getWeightIds() {
    return this.weightIds;
  }

  public User setWeightIds(List<Long> weightIds) {
    this.weightIds = weightIds;
    return this;
  }

  public void unsetWeightIds() {
    this.weightIds = null;
  }

  /** Returns true if field weightIds is set (has been assigned a value) and false otherwise */
  public boolean isSetWeightIds() {
    return this.weightIds != null;
  }

  public void setWeightIdsIsSet(boolean value) {
    if (!value) {
      this.weightIds = null;
    }
  }

  public UserAddress getUserAddress() {
    return this.userAddress;
  }

  public User setUserAddress(UserAddress userAddress) {
    this.userAddress = userAddress;
    return this;
  }

  public void unsetUserAddress() {
    this.userAddress = null;
  }

  /** Returns true if field userAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetUserAddress() {
    return this.userAddress != null;
  }

  public void setUserAddressIsSet(boolean value) {
    if (!value) {
      this.userAddress = null;
    }
  }

  public int getUserOrderSize() {
    return (this.userOrder == null) ? 0 : this.userOrder.size();
  }

  public java.util.Iterator<UserOrder> getUserOrderIterator() {
    return (this.userOrder == null) ? null : this.userOrder.iterator();
  }

  public void addToUserOrder(UserOrder elem) {
    if (this.userOrder == null) {
      this.userOrder = new ArrayList<UserOrder>();
    }
    this.userOrder.add(elem);
  }

  public List<UserOrder> getUserOrder() {
    return this.userOrder;
  }

  public User setUserOrder(List<UserOrder> userOrder) {
    this.userOrder = userOrder;
    return this;
  }

  public void unsetUserOrder() {
    this.userOrder = null;
  }

  /** Returns true if field userOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetUserOrder() {
    return this.userOrder != null;
  }

  public void setUserOrderIsSet(boolean value) {
    if (!value) {
      this.userOrder = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case EVER_USED_NAMES:
      if (value == null) {
        unsetEverUsedNames();
      } else {
        setEverUsedNames((List<String>)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((Integer)value);
      }
      break;

    case AGE:
      if (value == null) {
        unsetAge();
      } else {
        setAge((Integer)value);
      }
      break;

    case PRAISE_COUNT:
      if (value == null) {
        unsetPraiseCount();
      } else {
        setPraiseCount((Integer)value);
      }
      break;

    case FAN_IDS:
      if (value == null) {
        unsetFanIds();
      } else {
        setFanIds((List<Long>)value);
      }
      break;

    case FOLLOWER_IDS:
      if (value == null) {
        unsetFollowerIds();
      } else {
        setFollowerIds((List<Long>)value);
      }
      break;

    case FAN_NAMES:
      if (value == null) {
        unsetFanNames();
      } else {
        setFanNames((List<String>)value);
      }
      break;

    case FOLLOW_NAMES:
      if (value == null) {
        unsetFollowNames();
      } else {
        setFollowNames((List<String>)value);
      }
      break;

    case WEIGHT_IDS:
      if (value == null) {
        unsetWeightIds();
      } else {
        setWeightIds((List<Long>)value);
      }
      break;

    case USER_ADDRESS:
      if (value == null) {
        unsetUserAddress();
      } else {
        setUserAddress((UserAddress)value);
      }
      break;

    case USER_ORDER:
      if (value == null) {
        unsetUserOrder();
      } else {
        setUserOrder((List<UserOrder>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case USER_NAME:
      return getUserName();

    case EVER_USED_NAMES:
      return getEverUsedNames();

    case GENDER:
      return Integer.valueOf(getGender());

    case AGE:
      return Integer.valueOf(getAge());

    case PRAISE_COUNT:
      return Integer.valueOf(getPraiseCount());

    case FAN_IDS:
      return getFanIds();

    case FOLLOWER_IDS:
      return getFollowerIds();

    case FAN_NAMES:
      return getFanNames();

    case FOLLOW_NAMES:
      return getFollowNames();

    case WEIGHT_IDS:
      return getWeightIds();

    case USER_ADDRESS:
      return getUserAddress();

    case USER_ORDER:
      return getUserOrder();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case USER_NAME:
      return isSetUserName();
    case EVER_USED_NAMES:
      return isSetEverUsedNames();
    case GENDER:
      return isSetGender();
    case AGE:
      return isSetAge();
    case PRAISE_COUNT:
      return isSetPraiseCount();
    case FAN_IDS:
      return isSetFanIds();
    case FOLLOWER_IDS:
      return isSetFollowerIds();
    case FAN_NAMES:
      return isSetFanNames();
    case FOLLOW_NAMES:
      return isSetFollowNames();
    case WEIGHT_IDS:
      return isSetWeightIds();
    case USER_ADDRESS:
      return isSetUserAddress();
    case USER_ORDER:
      return isSetUserOrder();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof User)
      return this.equals((User)that);
    return false;
  }

  public boolean equals(User that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_everUsedNames = true && this.isSetEverUsedNames();
    boolean that_present_everUsedNames = true && that.isSetEverUsedNames();
    if (this_present_everUsedNames || that_present_everUsedNames) {
      if (!(this_present_everUsedNames && that_present_everUsedNames))
        return false;
      if (!this.everUsedNames.equals(that.everUsedNames))
        return false;
    }

    boolean this_present_gender = true;
    boolean that_present_gender = true;
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (this.gender != that.gender)
        return false;
    }

    boolean this_present_age = true;
    boolean that_present_age = true;
    if (this_present_age || that_present_age) {
      if (!(this_present_age && that_present_age))
        return false;
      if (this.age != that.age)
        return false;
    }

    boolean this_present_praiseCount = true;
    boolean that_present_praiseCount = true;
    if (this_present_praiseCount || that_present_praiseCount) {
      if (!(this_present_praiseCount && that_present_praiseCount))
        return false;
      if (this.praiseCount != that.praiseCount)
        return false;
    }

    boolean this_present_fanIds = true && this.isSetFanIds();
    boolean that_present_fanIds = true && that.isSetFanIds();
    if (this_present_fanIds || that_present_fanIds) {
      if (!(this_present_fanIds && that_present_fanIds))
        return false;
      if (!this.fanIds.equals(that.fanIds))
        return false;
    }

    boolean this_present_followerIds = true && this.isSetFollowerIds();
    boolean that_present_followerIds = true && that.isSetFollowerIds();
    if (this_present_followerIds || that_present_followerIds) {
      if (!(this_present_followerIds && that_present_followerIds))
        return false;
      if (!this.followerIds.equals(that.followerIds))
        return false;
    }

    boolean this_present_fanNames = true && this.isSetFanNames();
    boolean that_present_fanNames = true && that.isSetFanNames();
    if (this_present_fanNames || that_present_fanNames) {
      if (!(this_present_fanNames && that_present_fanNames))
        return false;
      if (!this.fanNames.equals(that.fanNames))
        return false;
    }

    boolean this_present_followNames = true && this.isSetFollowNames();
    boolean that_present_followNames = true && that.isSetFollowNames();
    if (this_present_followNames || that_present_followNames) {
      if (!(this_present_followNames && that_present_followNames))
        return false;
      if (!this.followNames.equals(that.followNames))
        return false;
    }

    boolean this_present_weightIds = true && this.isSetWeightIds();
    boolean that_present_weightIds = true && that.isSetWeightIds();
    if (this_present_weightIds || that_present_weightIds) {
      if (!(this_present_weightIds && that_present_weightIds))
        return false;
      if (!this.weightIds.equals(that.weightIds))
        return false;
    }

    boolean this_present_userAddress = true && this.isSetUserAddress();
    boolean that_present_userAddress = true && that.isSetUserAddress();
    if (this_present_userAddress || that_present_userAddress) {
      if (!(this_present_userAddress && that_present_userAddress))
        return false;
      if (!this.userAddress.equals(that.userAddress))
        return false;
    }

    boolean this_present_userOrder = true && this.isSetUserOrder();
    boolean that_present_userOrder = true && that.isSetUserOrder();
    if (this_present_userOrder || that_present_userOrder) {
      if (!(this_present_userOrder && that_present_userOrder))
        return false;
      if (!this.userOrder.equals(that.userOrder))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_userName = true && (isSetUserName());
    list.add(present_userName);
    if (present_userName)
      list.add(userName);

    boolean present_everUsedNames = true && (isSetEverUsedNames());
    list.add(present_everUsedNames);
    if (present_everUsedNames)
      list.add(everUsedNames);

    boolean present_gender = true;
    list.add(present_gender);
    if (present_gender)
      list.add(gender);

    boolean present_age = true;
    list.add(present_age);
    if (present_age)
      list.add(age);

    boolean present_praiseCount = true;
    list.add(present_praiseCount);
    if (present_praiseCount)
      list.add(praiseCount);

    boolean present_fanIds = true && (isSetFanIds());
    list.add(present_fanIds);
    if (present_fanIds)
      list.add(fanIds);

    boolean present_followerIds = true && (isSetFollowerIds());
    list.add(present_followerIds);
    if (present_followerIds)
      list.add(followerIds);

    boolean present_fanNames = true && (isSetFanNames());
    list.add(present_fanNames);
    if (present_fanNames)
      list.add(fanNames);

    boolean present_followNames = true && (isSetFollowNames());
    list.add(present_followNames);
    if (present_followNames)
      list.add(followNames);

    boolean present_weightIds = true && (isSetWeightIds());
    list.add(present_weightIds);
    if (present_weightIds)
      list.add(weightIds);

    boolean present_userAddress = true && (isSetUserAddress());
    list.add(present_userAddress);
    if (present_userAddress)
      list.add(userAddress);

    boolean present_userOrder = true && (isSetUserOrder());
    list.add(present_userOrder);
    if (present_userOrder)
      list.add(userOrder);

    return list.hashCode();
  }

  @Override
  public int compareTo(User other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEverUsedNames()).compareTo(other.isSetEverUsedNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEverUsedNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.everUsedNames, other.everUsedNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAge()).compareTo(other.isSetAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, other.age);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPraiseCount()).compareTo(other.isSetPraiseCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPraiseCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.praiseCount, other.praiseCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFanIds()).compareTo(other.isSetFanIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFanIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fanIds, other.fanIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFollowerIds()).compareTo(other.isSetFollowerIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollowerIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.followerIds, other.followerIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFanNames()).compareTo(other.isSetFanNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFanNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fanNames, other.fanNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFollowNames()).compareTo(other.isSetFollowNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollowNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.followNames, other.followNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeightIds()).compareTo(other.isSetWeightIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeightIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weightIds, other.weightIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserAddress()).compareTo(other.isSetUserAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userAddress, other.userAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserOrder()).compareTo(other.isSetUserOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userOrder, other.userOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("User(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("everUsedNames:");
    if (this.everUsedNames == null) {
      sb.append("null");
    } else {
      sb.append(this.everUsedNames);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gender:");
    sb.append(this.gender);
    first = false;
    if (!first) sb.append(", ");
    sb.append("age:");
    sb.append(this.age);
    first = false;
    if (!first) sb.append(", ");
    sb.append("praiseCount:");
    sb.append(this.praiseCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fanIds:");
    if (this.fanIds == null) {
      sb.append("null");
    } else {
      sb.append(this.fanIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("followerIds:");
    if (this.followerIds == null) {
      sb.append("null");
    } else {
      sb.append(this.followerIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fanNames:");
    if (this.fanNames == null) {
      sb.append("null");
    } else {
      sb.append(this.fanNames);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("followNames:");
    if (this.followNames == null) {
      sb.append("null");
    } else {
      sb.append(this.followNames);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("weightIds:");
    if (this.weightIds == null) {
      sb.append("null");
    } else {
      sb.append(this.weightIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userAddress:");
    if (this.userAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.userAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userOrder:");
    if (this.userOrder == null) {
      sb.append("null");
    } else {
      sb.append(this.userOrder);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserStandardSchemeFactory implements SchemeFactory {
    public UserStandardScheme getScheme() {
      return new UserStandardScheme();
    }
  }

  private static class UserStandardScheme extends StandardScheme<User> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, User struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EVER_USED_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.everUsedNames = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.everUsedNames.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setEverUsedNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gender = iprot.readI32();
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.age = iprot.readI32();
              struct.setAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRAISE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.praiseCount = iprot.readI32();
              struct.setPraiseCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FAN_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.fanIds = new ArrayList<Long>(_list3.size);
                long _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI64();
                  struct.fanIds.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setFanIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FOLLOWER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.followerIds = new ArrayList<Long>(_list6.size);
                long _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readI64();
                  struct.followerIds.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setFollowerIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FAN_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.fanNames = new ArrayList<String>(_list9.size);
                String _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = iprot.readString();
                  struct.fanNames.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setFanNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FOLLOW_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.followNames = new ArrayList<String>(_list12.size);
                String _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = iprot.readString();
                  struct.followNames.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setFollowNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // WEIGHT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct.weightIds = new ArrayList<Long>(_list15.size);
                long _elem16;
                for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                {
                  _elem16 = iprot.readI64();
                  struct.weightIds.add(_elem16);
                }
                iprot.readListEnd();
              }
              struct.setWeightIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // USER_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.userAddress = new UserAddress();
              struct.userAddress.read(iprot);
              struct.setUserAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // USER_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.userOrder = new ArrayList<UserOrder>(_list18.size);
                UserOrder _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  _elem19 = new UserOrder();
                  _elem19.read(iprot);
                  struct.userOrder.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setUserOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, User struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      if (struct.everUsedNames != null) {
        oprot.writeFieldBegin(EVER_USED_NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.everUsedNames.size()));
          for (String _iter21 : struct.everUsedNames)
          {
            oprot.writeString(_iter21);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GENDER_FIELD_DESC);
      oprot.writeI32(struct.gender);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AGE_FIELD_DESC);
      oprot.writeI32(struct.age);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRAISE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.praiseCount);
      oprot.writeFieldEnd();
      if (struct.fanIds != null) {
        oprot.writeFieldBegin(FAN_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.fanIds.size()));
          for (long _iter22 : struct.fanIds)
          {
            oprot.writeI64(_iter22);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.followerIds != null) {
        oprot.writeFieldBegin(FOLLOWER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.followerIds.size()));
          for (long _iter23 : struct.followerIds)
          {
            oprot.writeI64(_iter23);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.fanNames != null) {
        oprot.writeFieldBegin(FAN_NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.fanNames.size()));
          for (String _iter24 : struct.fanNames)
          {
            oprot.writeString(_iter24);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.followNames != null) {
        oprot.writeFieldBegin(FOLLOW_NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.followNames.size()));
          for (String _iter25 : struct.followNames)
          {
            oprot.writeString(_iter25);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.weightIds != null) {
        oprot.writeFieldBegin(WEIGHT_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.weightIds.size()));
          for (long _iter26 : struct.weightIds)
          {
            oprot.writeI64(_iter26);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.userAddress != null) {
        oprot.writeFieldBegin(USER_ADDRESS_FIELD_DESC);
        struct.userAddress.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.userOrder != null) {
        oprot.writeFieldBegin(USER_ORDER_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.userOrder.size()));
          for (UserOrder _iter27 : struct.userOrder)
          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserTupleSchemeFactory implements SchemeFactory {
    public UserTupleScheme getScheme() {
      return new UserTupleScheme();
    }
  }

  private static class UserTupleScheme extends TupleScheme<User> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, User struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUserName()) {
        optionals.set(1);
      }
      if (struct.isSetEverUsedNames()) {
        optionals.set(2);
      }
      if (struct.isSetGender()) {
        optionals.set(3);
      }
      if (struct.isSetAge()) {
        optionals.set(4);
      }
      if (struct.isSetPraiseCount()) {
        optionals.set(5);
      }
      if (struct.isSetFanIds()) {
        optionals.set(6);
      }
      if (struct.isSetFollowerIds()) {
        optionals.set(7);
      }
      if (struct.isSetFanNames()) {
        optionals.set(8);
      }
      if (struct.isSetFollowNames()) {
        optionals.set(9);
      }
      if (struct.isSetWeightIds()) {
        optionals.set(10);
      }
      if (struct.isSetUserAddress()) {
        optionals.set(11);
      }
      if (struct.isSetUserOrder()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetEverUsedNames()) {
        {
          oprot.writeI32(struct.everUsedNames.size());
          for (String _iter28 : struct.everUsedNames)
          {
            oprot.writeString(_iter28);
          }
        }
      }
      if (struct.isSetGender()) {
        oprot.writeI32(struct.gender);
      }
      if (struct.isSetAge()) {
        oprot.writeI32(struct.age);
      }
      if (struct.isSetPraiseCount()) {
        oprot.writeI32(struct.praiseCount);
      }
      if (struct.isSetFanIds()) {
        {
          oprot.writeI32(struct.fanIds.size());
          for (long _iter29 : struct.fanIds)
          {
            oprot.writeI64(_iter29);
          }
        }
      }
      if (struct.isSetFollowerIds()) {
        {
          oprot.writeI32(struct.followerIds.size());
          for (long _iter30 : struct.followerIds)
          {
            oprot.writeI64(_iter30);
          }
        }
      }
      if (struct.isSetFanNames()) {
        {
          oprot.writeI32(struct.fanNames.size());
          for (String _iter31 : struct.fanNames)
          {
            oprot.writeString(_iter31);
          }
        }
      }
      if (struct.isSetFollowNames()) {
        {
          oprot.writeI32(struct.followNames.size());
          for (String _iter32 : struct.followNames)
          {
            oprot.writeString(_iter32);
          }
        }
      }
      if (struct.isSetWeightIds()) {
        {
          oprot.writeI32(struct.weightIds.size());
          for (long _iter33 : struct.weightIds)
          {
            oprot.writeI64(_iter33);
          }
        }
      }
      if (struct.isSetUserAddress()) {
        struct.userAddress.write(oprot);
      }
      if (struct.isSetUserOrder()) {
        {
          oprot.writeI32(struct.userOrder.size());
          for (UserOrder _iter34 : struct.userOrder)
          {
            _iter34.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, User struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list35 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.everUsedNames = new ArrayList<String>(_list35.size);
          String _elem36;
          for (int _i37 = 0; _i37 < _list35.size; ++_i37)
          {
            _elem36 = iprot.readString();
            struct.everUsedNames.add(_elem36);
          }
        }
        struct.setEverUsedNamesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.gender = iprot.readI32();
        struct.setGenderIsSet(true);
      }
      if (incoming.get(4)) {
        struct.age = iprot.readI32();
        struct.setAgeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.praiseCount = iprot.readI32();
        struct.setPraiseCountIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list38 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.fanIds = new ArrayList<Long>(_list38.size);
          long _elem39;
          for (int _i40 = 0; _i40 < _list38.size; ++_i40)
          {
            _elem39 = iprot.readI64();
            struct.fanIds.add(_elem39);
          }
        }
        struct.setFanIdsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.followerIds = new ArrayList<Long>(_list41.size);
          long _elem42;
          for (int _i43 = 0; _i43 < _list41.size; ++_i43)
          {
            _elem42 = iprot.readI64();
            struct.followerIds.add(_elem42);
          }
        }
        struct.setFollowerIdsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list44 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.fanNames = new ArrayList<String>(_list44.size);
          String _elem45;
          for (int _i46 = 0; _i46 < _list44.size; ++_i46)
          {
            _elem45 = iprot.readString();
            struct.fanNames.add(_elem45);
          }
        }
        struct.setFanNamesIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.followNames = new ArrayList<String>(_list47.size);
          String _elem48;
          for (int _i49 = 0; _i49 < _list47.size; ++_i49)
          {
            _elem48 = iprot.readString();
            struct.followNames.add(_elem48);
          }
        }
        struct.setFollowNamesIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list50 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.weightIds = new ArrayList<Long>(_list50.size);
          long _elem51;
          for (int _i52 = 0; _i52 < _list50.size; ++_i52)
          {
            _elem51 = iprot.readI64();
            struct.weightIds.add(_elem51);
          }
        }
        struct.setWeightIdsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.userAddress = new UserAddress();
        struct.userAddress.read(iprot);
        struct.setUserAddressIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.userOrder = new ArrayList<UserOrder>(_list53.size);
          UserOrder _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = new UserOrder();
            _elem54.read(iprot);
            struct.userOrder.add(_elem54);
          }
        }
        struct.setUserOrderIsSet(true);
      }
    }
  }

}

